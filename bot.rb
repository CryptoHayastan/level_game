require 'telegram/bot'
require_relative 'config/environment'
require 'rufus-scheduler'
require 'fileutils'

LOCK_FILE = 'bot.lock'

if File.exist?(LOCK_FILE)
  puts "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!"
  exit
else
  FileUtils.touch(LOCK_FILE)
end

TOKEN = ENV['TELEGRAM_BOT_TOKEN']
CHANNEL = '@PlanHubTM'
CHANNEL_LINK = 'https://t.me/PlanHubTM'
CHAT_ID = -1002484385346
SUPERADMINS = User.where(role: 'superadmin')

def find_or_update_user(update)
  return unless update.respond_to?(:from) && update.from

  user_id = update.from.id
  username = update.from.username || ''
  first_name = update.from.first_name || ''
  last_name = update.from.last_name || ''

  chat_id =
    if update.respond_to?(:chat) && update.chat&.title && update.chat&.id
      update.chat.id
    elsif update.respond_to?(:message) && update.message&.chat&.id
      update.message.chat.id
    end

  user = User.find_or_initialize_by(telegram_id: user_id)
  user.username = username
  user.first_name = first_name
  user.last_name = last_name
  user.role ||= 'user'
  user.step ||= 'start'
  user.ban ||= false
  user.parent_access ||= true # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∞–º –ø–æ —Å–µ–±–µ
  user.referral_link ||= "https://t.me/PLANhuBot?start=#{user.telegram_id}"
  user.balance ||= 0
  user.score ||= 0
  user.save!

  user
end

def admin_user?(bot, chat_id, user_id)
  begin
    admins = bot.api.getChatAdministrators(chat_id: chat_id)

    is_admin = admins.any? { |admin| admin.user.id.to_i == user_id.to_i }

    if is_admin
      user = User.find_by(telegram_id: user_id)
      if user && user.role != 'admin'
        if user.role != 'superadmin' && user.role != 'shop'
          user.update(role: 'admin')
        end
      end
    end

    is_admin
  rescue => e
    puts "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∞: #{e.message}"
    false
  end
end

def safe_telegram_name(u)
  if u.first_name.present? || u.last_name.present?
    [
      u.first_name&.gsub('_', '\\_'),
      u.last_name&.gsub('_', '\\_')
    ].compact.join(' ')
  elsif u.username.present?
    "@#{u.username.gsub('_', '\\_')}"
  else
    "–ë–µ–∑ –∏–º–µ–Ω–∏"
  end
end

def collect_daily_bonus(user, bot, telegram_id, callback_query)
  return unless user && user.telegram_id == telegram_id

  daily_bonus = user.daily_bonus || user.create_daily_bonus(bonus_day: 0)
  now = Time.current

  if daily_bonus.last_collected_at&.to_date == now.to_date
    bot.api.answer_callback_query(
      callback_query_id: callback_query.id,
      text: "üìÖ ‘¥’∏÷Ç÷Ñ ’°÷Ä’§’•’∂ ’Ω’ø’°÷Å’•’¨ ’•÷Ñ ’¢’∏’∂’∏÷Ç’Ω’® ’°’µ’Ω÷Ö÷Ä÷â ’é’•÷Ä’°’§’°÷Ä’±’•÷Ñ ’æ’°’≤’®÷â"
    )
    return
  end

  if daily_bonus.last_collected_at && daily_bonus.last_collected_at.to_date < now.to_date - 1
    daily_bonus.bonus_day = 0
  end

  # —Å–±—Ä–æ—Å –ø–æ—Å–ª–µ 10 –¥–Ω—è
  daily_bonus.bonus_day = 0 if daily_bonus.bonus_day >= 10

  daily_bonus.bonus_day += 1
  daily_bonus.last_collected_at = now
  reward = daily_bonus.bonus_day * 100

  user.balance += reward
  user.score += reward
  daily_bonus.save!
  user.save!

  bot.api.answer_callback_query(
    callback_query_id: callback_query.id,
    text: "‚úÖ ‘≤’∏’∂’∏÷Ç’Ω’® ’Ω’ø’°÷Å’æ’•÷Å’ù +#{reward} ’¥’´’°’æ’∏÷Ä"
  )

  # üîÅ ‘π’°÷Ä’¥’°÷Å’∂’•’¨ ’∫÷Ä’∏÷Ü’´’¨’®
  bonus_day = daily_bonus.bonus_day > 10 ? 1 : daily_bonus.bonus_day
  progress = ("üü©" * bonus_day) + ("‚¨ú" * (10 - bonus_day))
  referrals_count = user.children.count
  purchases_count = user.promo_usages.count

  user_info = <<~HTML
    ‘±’∂’∏÷Ç’∂: #{safe_telegram_name(callback_query.from)}
    ‘≤’°’¨’°’∂’Ω: #{user.balance} LOM
    
    üë• ’å’•÷Ü’•÷Ä’°’¨’∂’•÷Ä: #{referrals_count}
    üõí ‘≥’∂’∏÷Ç’¥’∂’•÷Ä: #{purchases_count}

    üìÖ ‘≤’∏’∂’∏÷Ç’Ω: ’ï÷Ä #{bonus_day} - 10-’´÷Å
    #{progress}
  HTML

  buttons = [
    [Telegram::Bot::Types::InlineKeyboardButton.new(
      text: "’ç’ø’°’∂’°’¨ ÷Ö÷Ä’°’Ø’°’∂ ’¢’∏’∂’∏÷Ç’Ω’®", callback_data: "daily_bonus_#{user.telegram_id}"
    )]
  ]

  bot.api.edit_message_text(
    chat_id: callback_query.message.chat.id,
    message_id: callback_query.message.message_id,
    text: user_info,
    parse_mode: "HTML",
    reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)
  )
end

def steps(user, update, bot)
  message = update
  case user.step
  when 'awaiting_username_for_shop'
    username = message.text.delete_prefix('@').strip
    target_user = User.find_by(username: username)

    if target_user
      # –°–æ–∑–¥–∞—ë–º –º–∞–≥–∞–∑–∏–Ω —Å—Ä–∞–∑—É –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
      shop = Shop.create!(
        name: safe_telegram_name(target_user),
        link: target_user.username,
        user_id: target_user.id,
        online: false
      )
      target_user.update!(role: 'shop')

      bot.api.send_message(
        chat_id: user.telegram_id,
        text: "‚úÖ –ú–∞–≥–∞–∑–∏–Ω ¬´#{shop.name}¬ª —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ @#{target_user.username}"
      )
    else
      bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username @#{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    end

    user.update(step: nil)
   when 'awaiting_yerevan_name'
    name = message.text.strip

    if name.present?
      City.create!(name: name, sub: true)
      bot.api.send_message(
        chat_id: user.telegram_id,
        text: "‚úÖ ’è’°÷Ä’°’Æ÷Ñ’® ’°’æ’•’¨’°÷Å’æ’•’¨ ’ß: #{name}"
      )
    else
      bot.api.send_message(
        chat_id: user.telegram_id,
        text: "‚ö†Ô∏è ‘±’∂’∏÷Ç’∂’® ’π’´ ’Ø’°÷Ä’∏’≤ ’¨’´’∂’•’¨ ’§’°’ø’°÷Ä’Ø÷â ’ì’∏÷Ä’±’´÷Ä ’∂’∏÷Ä’´÷Å÷â"
      )
    end

    user.update(step: nil)

    shop = user.shop
    yerevan_places = City.where(sub: true)
    attached_ids = shop.city_ids

    buttons = yerevan_places.map do |city|
      attached = attached_ids.include?(city.id)
      emoji = attached ? '‚úÖ' : '‚ûï'
      Telegram::Bot::Types::InlineKeyboardButton.new(
        text: "#{emoji} #{city.name}",
        callback_data: "toggle_city_#{shop.id}_#{city.id}"
      )
    end.each_slice(2).to_a

    add_yerevan_place_button = Telegram::Bot::Types::InlineKeyboardButton.new(
      text: "‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’æ’°’µ÷Ä ‘µ÷Ä÷á’°’∂’∏÷Ç’¥",
      callback_data: "add_yerevan_place"
    )

    back_button = Telegram::Bot::Types::InlineKeyboardButton.new(
      text: "üîô ’é’•÷Ä’°’§’°’º’∂’°’¨",
      callback_data: "edit_cities_#{shop.id}"
    )

    keyboard = [[add_yerevan_place_button]] + buttons + [[back_button]]

    bot.api.send_message(
      chat_id: user.telegram_id,
      text: "üìç ‘∏’∂’ø÷Ä’´÷Ä ‘µ÷Ä÷á’°’∂’´ ’ø’°÷Ä’°’Æ÷Ñ’∂’•÷Ä’®:",
      reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(
        inline_keyboard: keyboard
      )
    )

   when 'awaiting_new_city_name'
    city_name = message.text.strip
    if city_name.empty?
      bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
      return
    end

    city = City.find_or_create_by(name: city_name)
    user.update(step: nil)

    bot.api.send_message(chat_id: user.telegram_id, text: "‚úÖ –ì–æ—Ä–æ–¥ *#{city.name}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫.", parse_mode: 'Markdown')

    shop = user.shop
    all_cities = City.where(sub: [false, nil])
    attached_ids = shop.city_ids

    buttons = all_cities.map do |city|
      attached = attached_ids.include?(city.id)
      emoji = attached ? '‚úÖ' : '‚ûï'
      Telegram::Bot::Types::InlineKeyboardButton.new(
        text: "#{emoji} #{city.name}",
        callback_data: "toggle_city_#{shop.id}_#{city.id}"
      )
    end.each_slice(2).to_a

    add_general_city_button = Telegram::Bot::Types::InlineKeyboardButton.new(
      text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ (–æ–±—â–∏–π)",
      callback_data: "add_city"
    )

    yerevan_button = Telegram::Bot::Types::InlineKeyboardButton.new(
      text: "üèôÔ∏è ‘µ÷Ä÷á’°’∂",
      callback_data: "show_yerevan_subs"
    )

    bot.api.send_message(
      chat_id: user.telegram_id,
      text: "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞:",
      reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(
        inline_keyboard: [[add_general_city_button], [yerevan_button]] + buttons
      )
    )
  when 'waiting_for_promo_code'
    if update && update.text
      promo_code_text = update.text.strip
      promo = PromoCode.find_by(code: promo_code_text)

      if promo.nil?
        bot.api.send_message(chat_id: user.telegram_id, text: "’ä÷Ä’∏’¥’∏’Ø’∏’§’® ’π’´ ’£’ø’∂’æ’•’¨÷â ’ì’∏÷Ä’±’•÷Ñ ’∂’∏÷Ä’´÷Å")
        user.update(step: nil)
      elsif promo.expired?
        bot.api.send_message(chat_id: user.telegram_id, text: "’ä÷Ä’∏’¥’∏’Ø’∏’§’´ ’æ’°’æ’•÷Ä’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂’® ’Ω’∫’°’º’æ’•’¨ ’ß÷â")
        user.update(step: nil)
      elsif PromoUsage.exists?(user_id: user.id, promo_code_id: promo.id)
        bot.api.send_message(chat_id: user.telegram_id, text: "‘¥’∏÷Ç÷Ñ ’°÷Ä’§’•’∂ ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨ ’•÷Ñ ’°’µ’Ω ’∫÷Ä’∏’¥’∏’Ø’∏’§’®÷â")
        user.update(step: nil)
      else
        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–∞–ª–ª–æ–≤ —Ç–∏–ø—É –ø—Ä–æ–¥—É–∫—Ç–∞
        points_by_type = {
          1 => 3000,   # 0‚Ä§5’£
          2 => 5500,   # 1’£
          3 => 7500,   # 1‚Ä§5’£
          4 => 9500,   # 2’£
          5 => 11500,  # 2‚Ä§5’£
          6 => 13500,  # 3’£
          7 => 15000,  # 3‚Ä§5’£
          8 => 16500,  # 4’£
          9 => 18500,  # 4‚Ä§5’£
          10 => 19500  # 5’£
        }

        balance_to_add = points_by_type[promo.product_type] || 0

        user.balance ||= 0
        user.balance += balance_to_add
        user.score += balance_to_add
        user.step = nil
        user.save!

        PromoUsage.create!(user_id: user.id, promo_code_id: promo.id)

        bot.api.send_message(
          chat_id: user.telegram_id,
          text: "’ä÷Ä’∏’¥’∏’Ø’∏’§’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’®’∂’§’∏÷Ç’∂’æ’•’¨ ’ß÷â ‘¥’∏÷Ç÷Ñ ’Ω’ø’°÷Å’°÷Ñ #{balance_to_add} LOM÷â ’Ü’•÷Ä’Ø’°’µ’´’Ω ’¢’°’¨’°’∂’Ω’ù #{user.balance} LOM÷â"
        )
      end
    else
      bot.api.send_message(chat_id: user.telegram_id, text: "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’ø’•÷Ñ’Ω’ø’ù ’∏÷Ä’∫’•’Ω ’∫÷Ä’∏’¥’∏’Ø’∏’§÷â")
    end
  end
end

def create_promo_code(bot, user, shop_id, product_type_str)

  if user.role == 'shop'
    product_type = product_type_str.to_i

    product_names = {
      1 => "0,5’£",
      2 => "1’£",
      3 => "1‚Ä§5’£",
      4 => "2’£",
      5 => "2‚Ä§5’£",
      6 => "3’£",
      7 => "3‚Ä§5’£",
      8 => "4’£",
      9 => "4‚Ä§5’£",
      10 => "5’£"
    }

    product_name = product_names[product_type] || "‘±’∂’∞’°’µ’ø"

    promo_code = "#{shop_id}:#{product_type}:#{SecureRandom.hex(8)}"

    begin
      expires_at = 2.hours.from_now
      promo = PromoCode.create!(
        code: promo_code,
        shop_id: shop_id,
        product_type: product_type,
        expires_at: expires_at
      )
    rescue => e
      puts "üî• –û—à–∏–±–∫–∞: #{e.message}"
      puts e.backtrace.join("\n")
      bot.api.send_message(
        chat_id: user.telegram_id,
        text: "‚ùå ’ç’≠’°’¨ ’ø’•’≤’´ ’∏÷Ç’∂’•÷Å’°’æ÷â"
      )
      return
    end

    if promo.persisted?
      message = <<~TEXT
        üî§ ‘ø’∏’§’ù `#{promo_code}`
        ‚è≥ ’é’°’æ’•÷Ä ’ß’ù 2 ’™’°’¥
        üéØ ’è’•’Ω’°’Ø’ù #{product_name}

        üì• ‘ª’∂’π’∫’•’Ω ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨‚Ä§
        1. ‘≤’°÷Å’´÷Ä ’¢’∏’ø’® üëâ [@PLANhuBot](https://t.me/PLANhuBot)
        2. ’ç’•’≤’¥’´÷Ä **¬´Start¬ª** ’Ø’°’¥ ’∏÷Ç’≤’°÷Ä’Ø’´÷Ä ’∞÷Ä’°’¥’°’∂’® `/start`
        3. ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ÷Ñ’∏ ’Ø’∏’§’®’ù `#{promo_code}`
        4. ’ç’ø’°÷Å’´÷Ä ’¢’∏’∂’∏÷Ç’Ω’∂’•÷Ä ’Ø’°’¥ ’∞’°’ø’∏÷Ç’Ø ’°’º’°’ª’°÷Ä’Ø’∂’•÷Ä üéÅ

        ‚è∞ ’à÷Ç’∑’°’§÷Ä’∏÷Ç’©’µ’∏÷Ç’∂‚Ä§ ‘ø’∏’§’® ’∞’°’Ω’°’∂’•’¨’´ ’ß ’¥’´’°’µ’∂ 2 ’™’°’¥÷â ’Ñ’´ ’∏÷Ç’∑’°÷Å’´÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨÷â
      TEXT

      bot.api.send_message(
        chat_id: user.telegram_id,
        text: message,
        parse_mode: 'Markdown'
      )
    else
      bot.api.send_message(
        chat_id: user.telegram_id,
        text: "‚ùå ’ç’≠’°’¨ ’Ω’ø’•’≤’Æ’¥’°’∂ ’™’°’¥’°’∂’°’Ø÷â"
      )
    end
  end
end


def format_discount(discount)
  case discount
  when 5
    "0.5’£"
  when 1
    "1’£"
  when 20, 50
    "#{discount}% ’¶’•’≤’π"
  else
    "’ç’≤’°’¨ ’ß ’ø’•’≤’´ ’∏÷Ç’∂’•’≤’•’¨"
  end
end

Telegram::Bot::Client.run(TOKEN) do |bot|
  puts "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω..."

  scheduler = Rufus::Scheduler.new

  scheduler.every '30m' do
    Shop.where(online: true).find_each do |shop|
      if shop.online_since && shop.online_since < 30.minutes.ago
        shop.update(online: false)

        # –£–≤–µ–¥–æ–º–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if shop.user&.telegram_id
          bot.api.send_message(
            chat_id: shop.user.telegram_id,
            text: "üî¥ –í–∞—à –º–∞–≥–∞–∑–∏–Ω ¬´#{shop.name}¬ª –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á—ë–Ω —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç."
          )
        end
      end
    end
  end

  bot.listen do |update|
    begin
      user = find_or_update_user(update)

      steps(user, update, bot)
      
      case update
      when Telegram::Bot::Types::Message
        text = update.text
  
        case text
        when '/start'
          user.update(step: nil)

          if user.role == 'shop'
            bot.api.send_message(chat_id: user.telegram_id, text: "üë§ ‘¥’∏÷Ç÷Ñ ’Ä’°’≥’°’≠’∏÷Ä’§ ’π’•÷Ñ÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ /my_shop ’∞÷Ä’°’¥’°’∂’®")
          else
            full_name = [user.first_name, user.last_name].compact.join(' ')
            balance = user.balance || 0

            info_text = <<~HTML
              üë§ ‘±’∂’∏÷Ç’∂: #{full_name}
              üí∞ ‘≤’°’¨’°’∂’Ω: #{balance} LOM

              üîó ’Å’•÷Ä ’∞÷Ä’°’æ’´÷Ä’•’¨’∏÷Ç ’∞’≤’∏÷Ç’¥’® <code>https://t.me/PLANhuBot?start=#{user.telegram_id}</code>

              ‘∏’∂’ø÷Ä’•÷Ñ ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂ üëá
            HTML

            kb = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: [
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üî§ ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’∫÷Ä’∏’¥’∏’Ø’∏’§', callback_data: 'enter_promo')],
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üéÅ ‘≤’∏’∂’∏÷Ç’Ω’∂’•÷Ä', callback_data: 'bonus')],
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üöÄ ‘≤’∏÷Ç’Ω’ø x2’ù 2 ’™’°’¥’∏’æ', callback_data: 'activate_boost')],
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üí¨ ’Ñ’∏÷Ç’ø÷Ñ ’£’∏÷Ä’Æ’•’¨ ’π’°’©', url: 'https://t.me/+H3V09Qh9t701YzVh')]
            ])

            bot.api.send_message(chat_id: user.telegram_id, text: info_text.strip, parse_mode: "HTML", reply_markup: kb)
          end

        when /^\/start (\d+)$/
          referrer_telegram_id = $1.to_i
          referrer = User.find_by(telegram_id: referrer_telegram_id)

            if referrer && referrer.telegram_id != user.telegram_id
            unless user.persisted? && (user.ancestry.present? || user.ban?)
              user.update(pending_referrer_id: referrer.id)
              bot.api.send_message(chat_id: user.telegram_id, text: "üì© ’á’°÷Ä’∏÷Ç’∂’°’Ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’≠’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’¥’´’°’∂’°’¨’∏÷Ç ’∞’°’µ’ø’® ’π’°’©’´’∂’ù")
              bot.api.send_message(chat_id: user.telegram_id, text: "üëâ https://t.me/+H3V09Qh9t701YzVh")
            else
              bot.api.send_message(chat_id: user.telegram_id, text: "‚ö†Ô∏è ‘¥’∏÷Ç÷Ñ ’°÷Ä’§’•’∂ ’•’≤’•’¨ ’•÷Ñ ’π’°’©’´ ’¥’°’Ω’∂’°’Ø’´÷Å ÷á ’π’•÷Ñ ’Ø’°÷Ä’∏’≤ ’Ø÷Ä’Ø’´’∂ ’§’°’º’∂’°’¨ ’º’•÷Ü’•÷Ä’°’¨÷â")
              bot.api.send_message(chat_id: user.telegram_id, text: "üëâ https://t.me/+H3V09Qh9t701YzVh")
            end
            else
            bot.api.send_message(chat_id: user.telegram_id, text: "‚ö†Ô∏è ‘±’∂’©’∏÷Ç’µ’¨’°’ø÷Ä’•’¨’´ ’º’•÷Ü’•÷Ä’°’¨ ’∞’≤’∏÷Ç’¥÷â")
            end

        when '/profile'
          bonus_day = user.daily_bonus&.bonus_day.to_i
          bonus_day = 0 if bonus_day > 10
          days_left = 10 - bonus_day
  
          link = user.referral_link
          progress = ("üü©" * bonus_day) + ("‚¨ú" * (10 - bonus_day))
  
          referrals_count = user.children.count
          purchases_count = user.promo_usages.count

          user_info = <<~HTML
            üë§ ‘±’∂’∏÷Ç’∂: #{safe_telegram_name(update.from)}
            üí∞ ‘≤’°’¨’°’∂’Ω: #{user.balance} LOM

            üë• ’å’•÷Ü’•÷Ä’°’¨’∂’•÷Ä: #{referrals_count}
            üõí ‘≥’∂’∏÷Ç’¥’∂’•÷Ä: #{purchases_count}

            üìÖ ‘≤’∏’∂’∏÷Ç’Ω: ’ï÷Ä #{bonus_day} - 10-’´÷Å
            #{progress}
          HTML

          buttons = [
            [Telegram::Bot::Types::InlineKeyboardButton.new(text: "üéÅ ’ç’ø’°’∂’°’¨ ÷Ö÷Ä’°’Ø’°’∂ ’¢’∏’∂’∏÷Ç’Ω’®", callback_data: "daily_bonus_#{user.telegram_id}")]
          ]

          bot.api.send_message(
            chat_id: update.chat.id,
            reply_to_message_id: update.message_id,
            text: user_info,
            parse_mode: "HTML",
            reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)
          )

        when '/my_shop'
          if user.role == 'shop'
            shop = Shop.find_by(user_id: user.id)

            if shop
              shop_info = <<~TEXT
                üè™ ‘Ω’°’∂’∏÷Ç’© - #{shop.name}
                üîó ’Ä’≤’∏÷Ç’¥ - @#{shop.link}
                üì∂ ‘ø’°÷Ä’£’°’æ’´’≥’°’Ø - #{shop.online ? 'üü¢ ’ï’∂’¨’°’µ’∂' : 'üî¥ ’ï÷Ü’¨’°’µ’∂'}
                üèô ’î’°’≤’°÷Ñ’∂’•÷Ä - #{shop.cities.map(&:name).join(', ')}
              TEXT

              toggle_button = Telegram::Bot::Types::InlineKeyboardButton.new(
                text: shop.online ? 'üî¥ ‘±’∂’ª’°’ø’•’¨ ’ï’∂’¨’°’µ’∂’®' : 'üü¢ ’Ñ’´’°÷Å’∂’•’¨ ’ï’∂’¨’°’µ’∂’®',
                callback_data: "toggle_online_#{shop.id}"
              )

              bot.api.send_message(
                chat_id: user.telegram_id,
                text: shop_info,
                reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(
                  inline_keyboard: [
                    [toggle_button],
                    [Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üìç ’î’°’≤’°÷Ñ’∂’•÷Ä’´ ’Ø’°’º’°’æ’°÷Ä’∏÷Ç’¥', callback_data: "edit_cities_#{shop.id}")],
                    [Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üéü ’ç’ø’•’≤’Æ’•’¨ ’∫÷Ä’∏’¥’∏’Ø’∏’§', callback_data: "create_promo_#{shop.id}")]
                  ]
                )
              )
            end
          end

        when '/kap'
          excluded_links = %w[]

          shops_online = Shop.where(online: true).where.not(link: excluded_links)
          shops_offline = Shop.where(online: false).where.not(link: excluded_links)

          text = "<b>üõç ’Ä’°÷Ä’©’°’Ø’∏÷Ç’¥ ’æ’Ω’ø’°’∞’æ’°’Æ ‘Ω’°’∂’∏÷Ç’©’∂’•÷Ä’´ ’∞’≤’∏÷Ç’¥’∂’•÷Ä’®’ù</b>\n\n"

          if shops_online.any?
            text += "üü¢ ‘ø’°’∫ (÷Ö’∂’¨’°’µ’∂):\n"
            shops_online.each do |shop|
              text += "‚Ä¢ @#{shop.link}\n"
            end
            text += "\n"
          end

          if shops_offline.any?
            text += "üî¥ ‘ø’°’∫ ’π’Ø’° (÷Ö÷Ü’¨’°’µ’∂):\n"
            shops_offline.each do |shop|
              text += "‚Ä¢ @#{shop.link}\n"
            end
          end

          bot.api.send_message(
            chat_id: update.chat.id,
            text: text,
            parse_mode: 'HTML'
          )
        when '/map'
          general_cities = City.where(sub: [false, nil])
          yerevan_button = Telegram::Bot::Types::InlineKeyboardButton.new(
            text: "üèô ‘µ÷Ä÷á’°’∂",
            callback_data: "yerevan_map"
          )

          city_buttons = general_cities.map do |city|
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: city.name,
              callback_data: "city_#{city.id}"
            )
          end

          # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –≤ —Ä—è–¥
          keyboard = [[yerevan_button]] + city_buttons.each_slice(2).to_a

          markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: keyboard)

          bot.api.send_message(
            chat_id: update.chat.id,
            text: "üèô ‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’°’≤’°÷Ñ’® üëá",
            reply_markup: markup
          )

        when '/top'
          top_users = User.order(score: :desc).limit(10)

            message = "üèÜ ‘π’∏÷É 10 ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä ’¥’´’°’æ’∏÷Ä’∂’•÷Ä’∏’æ’ù\n\n"
          top_users.each_with_index do |u, i|
            name = "#{u.first_name} #{u.last_name}"
            message += "#{i + 1}. #{name} ‚Äî #{u.score} LOM\n"
          end

          bot.api.send_message(chat_id: CHAT_ID, text: message)

        when '/admin'
          if user.role == 'superadmin'
            kb = [
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üìã –í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', callback_data: 'list_shops')],
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', callback_data: 'add_shop')],
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üß® –û–±–Ω—É–ª–∏—Ç—å –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'confirm_reset_scores')]
            ]

            markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
            bot.api.send_message(chat_id: user.telegram_id, text: "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup: markup)
          end

        when '/cancel'
          user.update(step: nil)
          bot.api.send_message(chat_id: user.telegram_id, text: "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        when '/ban'
          admin_user?(bot, CHAT_ID, user.telegram_id)
          if update.reply_to_message
            chat_id = update.chat.id

            if user&.role == 'superadmin' || admin_user?(bot, CHAT_ID, user.telegram_id) || user&.role == 'shop'
              target_id = update.reply_to_message.from.id
              begin
                bot.api.banChatMember(chat_id: chat_id, user_id: target_id)
                bot.api.send_message(chat_id: chat_id, text: "üö´ ’ï’£’ø’°’ø’•÷Ä’® ’°÷Ä’£’•’¨’°÷É’°’Ø’æ’°’Æ ’ß÷â")
              rescue => e
                bot.api.send_message(chat_id: chat_id, text: "‚ùå ’ï’£’ø’°’ø’´÷Ä’∏’ª’® ’°÷Ä’£’•’¨’°÷É’°’Ø’•’¨ ’π’∞’°’ª’∏’≤’æ’•÷Å: #{e.update}")
              end
            else
                bot.api.send_message(chat_id: chat_id, text: "‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’§÷Ä’° ’∞’°’¥’°÷Ä ’´÷Ä’°’æ’∏÷Ç’∂÷Ñ’∂’•÷Ä÷â")
            end
          else
            bot.api.send_message(chat_id: update.chat.id, text: "‚õî ’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’®’ù ’´ ’∫’°’ø’°’Ω’≠’°’∂ ’°’µ’∂ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’°’∂’®, ’∏÷Ä’´’∂ ÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’•÷Ñ ’°÷Ä’£’•’¨’°÷É’°’Ø’•’¨÷â")
          end
        when '/today'
          if user&.role == 'superadmin'
            start_of_day = Time.current.beginning_of_day
            end_of_day = Time.current.end_of_day

            stats = Shop.all.map do |shop|
              promo_codes_today = shop.promo_codes
                                      .where(created_at: start_of_day..end_of_day)
                                      .count

              "üõçÔ∏è #{shop.name}: #{promo_codes_today} ’æ’°’≥’°’º÷Ñ"
            end

            message = stats.any? ? stats.join("\n") : "‘±’µ’Ω÷Ö÷Ä ’Ω’ø’•’≤’Æ’æ’°’Æ ’∫÷Ä’∏’¥’∏’Ø’∏’§’∂’•÷Ä ’π’Ø’°’∂÷â"

            bot.api.send_message(
              chat_id: user.telegram_id,
              text: "üìä ‘±’µ’Ω÷Ö÷Ä’æ’° ’æ’°’≥’°’º÷Ñ’∂’•÷Ä’®\n\n#{message}"
            )
          end

        when '/week'
          if user&.role == 'superadmin'
            start_of_week = Time.current.beginning_of_day - 6.days
            end_of_day = Time.current.end_of_day

            stats = Shop.all.map do |shop|
              promo_codes_week = shop.promo_codes
                                    .where(created_at: start_of_week..end_of_day)
                                    .count

              "üõçÔ∏è #{shop.name}: #{promo_codes_week} ’æ’°’≥’°’º÷Ñ"
            end

            message = stats.any? ? stats.join("\n") : "‘±’µ’Ω ’∑’°’¢’°’© ’Ω’ø’•’≤’Æ’æ’°’Æ ’∫÷Ä’∏’¥’∏’Ø’∏’§’∂’•÷Ä ’π’Ø’°’∂÷â"

            bot.api.send_message(
              chat_id: update.chat.id,
              text: "üìä ’á’°’¢’°’©’°’Ø’°’∂ ’æ’°’≥’°’º÷Ñ’∂’•÷Ä’® (’æ’•÷Ä’ª’´’∂ 7 ÷Ö÷Ä)\n\n#{message}"
            )
          end
        
        when /^[+-]\d+LOM$/i
          if update.reply_to_message
            chat_id = update.chat.id
            reply_to_message_id = update.reply_to_message.message_id
            target_user_id = update.reply_to_message.from.id
            command = text.strip.upcase

            if match = command.match(/^([+-])(\d+)LOM$/)
              sign = match[1]
              points = match[2].to_i

              if user&.role == 'superadmin'
                target_user = User.find_by(telegram_id: target_user_id)

                if target_user
                  if sign == '+'
                    target_user.increment!(:balance, points)
                    target_user.increment!(:score, points)
                    action_text = "’°’æ’•’¨’°÷Å’æ’•’¨ ’ß"
                  elsif sign == '-'
                    target_user.decrement!(:balance, points)
                    target_user.decrement!(:score, points)
                    action_text = "’∞’°’∂’æ’•’¨ ’ß"
                  end

                  bot.api.send_message(
                    chat_id: chat_id,
                    text: "üí∏ #{safe_telegram_name(target_user)}-’´’∂ #{action_text} #{points} LOM üíµ.",
                    reply_to_message_id: reply_to_message_id
                  )
                else
                    bot.api.send_message(
                    chat_id: chat_id,
                    text: "‚ùå ’ï’£’ø’°’ø’•÷Ä’® ’¢’°’¶’°’µ’∏÷Ç’¥ ’π’´ ’£’ø’∂’æ’•’¨÷â",
                    reply_to_message_id: reply_to_message_id
                    )
                end
              else
                bot.api.send_message(
                  chat_id: chat_id,
                  text: "‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’´÷Ä’°’æ’∏÷Ç’∂÷Ñ÷â"
                )
              end
            end
          end
        
        when /^\/whois (.+)/
          query = update.text.gsub('/whois ', '').strip.downcase

          target_user = User.where(
            "LOWER(first_name) = :q OR LOWER(last_name) = :q OR LOWER(username) = :q OR CAST(telegram_id AS TEXT) = :raw_q",
            q: query, raw_q: query
          ).first

          if target_user
            purchases = PromoUsage.where(user_id: target_user.id).count
            referrals = User.where(pending_referrer_id: target_user.id).count

            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telegram::Bot::Types
            buttons = []

            buttons << Telegram::Bot::Types::InlineKeyboardButton.new(
              text: "üßí –†–µ—Ñ–µ—Ä–∞–ª—ã",
              callback_data: "show_children:#{target_user.id}"
            )

            buttons << Telegram::Bot::Types::InlineKeyboardButton.new(
              text: "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å",
              callback_data: "select_role:#{target_user.id}"
            )

            if target_user.parent
              buttons << Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "üë®‚Äçüë©‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å",
                callback_data: "show_parent:#{target_user.id}"
              )
            end

            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
              inline_keyboard: buttons.each_slice(2).to_a # –º–∞–∫—Å–∏–º—É–º 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
            )

            bot.api.send_message(
              chat_id: user.telegram_id,
              text: <<~TEXT,
                üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*

                üÜî Telegram ID: `#{target_user.telegram_id}`
                üôç‚Äç‚ôÇÔ∏è –ò–º—è: #{target_user.first_name || '-'}
                üôç‚Äç‚ôÄÔ∏è –§–∞–º–∏–ª–∏—è: #{target_user.last_name || '-'}
                üßë‚Äçüíª Username: @#{target_user.username || '-'}
                üëë –†–æ–ª—å: #{target_user.role}
                üí∞ –ë–∞–ª–∞–Ω—Å: #{target_user.balance || 0} –º–æ–Ω–µ—Ç
                üßÆ –°—á–µ—Ç: #{target_user.score || 0}
                üõçÔ∏è –ü–æ–∫—É–ø–æ–∫: #{purchases}
                üßë‚Äçü§ù‚Äçüßë –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: #{referrals}
              TEXT
              parse_mode: 'Markdown',
              reply_markup: keyboard
            )
          else
            bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
          end
  
        else
          if update.text.present? && !update.sticker && !update.animation && !update.photo && update.chat.id == CHAT_ID
            user.add_message_point!
            points = user.active_boost ? 2 : 1
            user.increment!(:score, points)
          end
        end
  
      when Telegram::Bot::Types::CallbackQuery
        data = update.data
  
        case data
        when /^daily_bonus_/
          telegram_id = data.split('_').last.to_i
          collect_daily_bonus(user, bot, telegram_id, update)

        when /^city_/
          bot.api.answer_callback_query(callback_query_id: update.id)

          excluded_links = %w[]

          city_id = update.data.split('_').last.to_i
          city = City.find_by(id: city_id)

          if city.nil?
            bot.api.answer_callback_query(callback_query_id: update.id, text: "’î’°’≤’°÷Ñ’® ’π’´ ’£’ø’∂’æ’•’¨÷â", show_alert: true)
            return
          end

          shops = city.shops.where.not(link: excluded_links)

          shop_list = if shops.any?
                        shops.map do |shop|
                          status = shop.online ? "üü¢" : "üî¥"
                          "‚Ä¢ @#{shop.link} #{status}"
                        end.join("\n")
                      else
                        "‚ùå ‘±’µ’Ω ÷Ñ’°’≤’°÷Ñ’∏÷Ç’¥ ’≠’°’∂’∏÷Ç’©’∂’•÷Ä ’π’Ø’°’∂÷â"
                      end

          bot.api.send_message(
            chat_id: update.from.id,
            text: "<b>#{city.name} ’î’°’≤’°÷Ñ’´ ’≠’°’∂’∏÷Ç’©’∂’•÷Ä</b>\n\n#{shop_list}",
            parse_mode: 'HTML'
          )

          
          if city.sub
            buttons = [
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: "üîô ’é’•÷Ä’°’§’°’º’∂’°’¨ ÷Ñ’°’≤’°÷Ñ’∂’•÷Ä", callback_data: "yerevan_map")]
            ]
          else
            buttons = [
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: "üîô ’é’•÷Ä’°’§’°’º’∂’°’¨ ÷Ñ’°’≤’°÷Ñ’∂’•÷Ä", callback_data: "map")]
            ]
          end

          bot.api.edit_message_text(
            chat_id: CHAT_ID,
            message_id: update.message.message_id,
            text: "üèô <b>#{city.name}</b>\n\n#{shop_list}",
            parse_mode: 'HTML',
            reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)
          )

        when /^delete_shop_(\d+)$/
          shop_id = $1.to_i
          shop = Shop.find_by(id: shop_id)

          if shop
            User.find(shop.user_id).update(role: 'user')
            shop.destroy
            bot.api.send_message(chat_id: update.from.id, text: "üóë –ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
          else
            bot.api.send_message(chat_id: update.from.id, text: "‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
          end

        when /^toggle_online_(\d+)$/
          shop = Shop.find_by(id: $1.to_i)

          if shop && shop.user_id == user.id && user.role == 'shop'
            if shop.online
              shop.update(online: false)
              bot.api.send_message(chat_id: user.telegram_id, text: "üî¥ –ú–∞–≥–∞–∑–∏–Ω –æ—Ç–∫–ª—é—á—ë–Ω.")
            else
              shop.update(online: true, online_since: Time.current)  # online_since ‚Äî –Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
              bot.api.send_message(chat_id: user.telegram_id, text: "üü¢ –ú–∞–≥–∞–∑–∏–Ω –≤–∫–ª—é—á—ë–Ω. –ê–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç.")
            end
          else
            bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
          end

        when /^edit_cities_(\d+)$/
          shop = Shop.find_by(id: $1)

          if shop && shop.user_id == user.id
            all_cities = City.where(sub: [false, nil])
            attached_ids = shop.city_ids

            buttons = all_cities.map do |city|
              attached = attached_ids.include?(city.id)
              emoji = attached ? '‚úÖ' : '‚ûï'
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "#{emoji} #{city.name}",
                callback_data: "toggle_city_#{shop.id}_#{city.id}"
              )
            end.each_slice(2).to_a

            # ‚ûï –ö–Ω–æ–ø–∫–∞ —Å–≤–µ—Ä—Ö—É
            add_general_city_button = Telegram::Bot::Types::InlineKeyboardButton.new(
              text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ (–æ–±—â–∏–π)",
              callback_data: "add_city"
            )

             yerevan_button = Telegram::Bot::Types::InlineKeyboardButton.new(
              text: "üèôÔ∏è ‘µ÷Ä÷á’°’∂",
              callback_data: "show_yerevan_subs"
            )

            bot.api.edit_message_text(
              chat_id: user.telegram_id,
              message_id: update.message.message_id,
              text: "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞:",
              reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(
                inline_keyboard: [[add_general_city_button],[yerevan_button]] + buttons
              )
            )
          end

        when /^toggle_city_(\d+)_(\d+)$/
          shop = Shop.find_by(id: $1)
          city = City.find_by(id: $2)

          if shop && city && shop.user_id == user.id
            if shop.cities.exists?(city.id)
              shop.cities.delete(city)
            else
              shop.cities << city
            end

            attached_ids = shop.city_ids

            if city.sub # üü° –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Ä–µ–≤–∞–Ω—Å–∫–∏–µ –º–µ—Å—Ç–∞
              yerevan_places = City.where(sub: true)
              buttons = yerevan_places.map do |place|
                attached = attached_ids.include?(place.id)
                emoji = attached ? '‚úÖ' : '‚ûï'
                Telegram::Bot::Types::InlineKeyboardButton.new(
                  text: "#{emoji} #{place.name}",
                  callback_data: "toggle_city_#{shop.id}_#{place.id}"
                )
              end.each_slice(2).to_a

              add_yerevan_place_button = Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’æ’°’µ÷Ä ‘µ÷Ä÷á’°’∂’∏÷Ç’¥",
                callback_data: "add_yerevan_place"
              )

              back_button = Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "üîô ’é’•÷Ä’°’§’°’º’∂’°’¨",
                callback_data: "edit_cities_#{shop.id}"
              )

              keyboard = [[add_yerevan_place_button]] + buttons + [[back_button]]

              bot.api.edit_message_reply_markup(
                chat_id: user.telegram_id,
                message_id: update.message.message_id,
                reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(
                  inline_keyboard: keyboard
                )
              )
            else # üîµ –û–±—ã—á–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
              all_cities = City.where(sub: [false, nil])
              buttons = all_cities.map do |c|
                attached = attached_ids.include?(c.id)
                emoji = attached ? '‚úÖ' : '‚ûï'
                Telegram::Bot::Types::InlineKeyboardButton.new(
                  text: "#{emoji} #{c.name}",
                  callback_data: "toggle_city_#{shop.id}_#{c.id}"
                )
              end.each_slice(2).to_a

              add_general_city_button = Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ (–æ–±—â–∏–π)",
                callback_data: "add_city"
              )

              yerevan_button = Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "üèôÔ∏è ‘µ÷Ä÷á’°’∂",
                callback_data: "show_yerevan_subs"
              )

              keyboard = [[add_general_city_button], [yerevan_button]] + buttons

              bot.api.edit_message_reply_markup(
                chat_id: user.telegram_id,
                message_id: update.message.message_id,
                reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(
                  inline_keyboard: keyboard
                )
              )
            end
          end

        when /^create_promo_(\d+)$/
          shop = Shop.find_by(id: $1)
          if shop && shop.user_id == user.id
            buttons = [
              ["0.5’£", 1],
              ["1’£", 2],
              ["1.5’£", 3],
              ["2’£", 4],
              ["2.5’£", 5],
              ["3’£", 6],
              ["3.5’£", 7],
              ["4’£", 8],
              ["4.5’£", 9],
              ["5’£", 10]
            ]

            inline_keyboard = buttons.each_slice(3).map do |group|
              group.map do |text, idx|
                Telegram::Bot::Types::InlineKeyboardButton.new(
                  text: text,
                  callback_data: "product#{idx}_#{shop.id}"
                )
              end
            end

            bot.api.send_message(
              chat_id: user.telegram_id,
              text: "üõç ’à’û÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂ ’ß÷â\n‘∏’∂’ø÷Ä’•÷Ñ ’ø’•’Ω’°’Ø’®’ù",
              reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(
                inline_keyboard: inline_keyboard
              )
            )
          end

        when /^product1_\d+$/
          shop_id = data.split('_').last.to_i
          create_promo_code(bot, user, shop_id, 1)

        when /^product2_\d+$/
          shop_id = data.split('_').last.to_i
          create_promo_code(bot, user, shop_id, 2)
        when /^product3_\d+$/
          shop_id = data.split('_').last.to_i
          create_promo_code(bot, user, shop_id, 3)
        when /^product4_\d+$/
          shop_id = data.split('_').last.to_i
          create_promo_code(bot, user, shop_id, 4)
        when /^product5_\d+$/
          shop_id = data.split('_').last.to_i
          create_promo_code(bot, user, shop_id, 5)
        when /^product6_\d+$/
          shop_id = data.split('_').last.to_i
          create_promo_code(bot, user, shop_id, 6)
        when /^product7_\d+$/
          shop_id = data.split('_').last.to_i
          create_promo_code(bot, user, shop_id, 7)
        when /^product8_\d+$/
          shop_id = data.split('_').last.to_i
          create_promo_code(bot, user, shop_id, 8)
        when /^product9_\d+$/
          shop_id = data.split('_').last.to_i
          create_promo_code(bot, user, shop_id, 9)
        when /^product10_\d+$/
          shop_id = data.split('_').last.to_i
          create_promo_code(bot, user, shop_id, 10)
        when /^bonus_(\d+)$/
          discount = $1.to_i  # 50, 20 –∏–ª–∏ 5

          # –¶–µ–Ω—ã –±–æ–Ω—É—Å–æ–≤ –≤ –æ—á–∫–∞—Ö
          bonus_prices = {
            50 => 35_000,
            20 => 15_000,
            5  => 50_000,
            1 => 100_000
          }

          price = bonus_prices[discount]
            if user.balance.to_i < price
            bot.api.send_message(
              chat_id: user.telegram_id,
              text: "’Å’•÷Ä ’¥’´’°’æ’∏÷Ä’∂’•÷Ä’® ’¢’°’æ’°÷Ä’°÷Ä ’π’•’∂ #{format_discount(discount)} ’¢’∏’∂’∏÷Ç’Ω’® ’Ω’ø’°’∂’°’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â ‘±’∂’∞÷Ä’°’™’•’∑’ø ’ß #{price}, ’±’•÷Ä ’¢’°’¨’°’∂’Ω’®’ù #{user.balance}÷â"
            )
            next
            end

            # ’ç’°’∞’¥’°’∂’∏÷Ç’¥ ’•’∂÷Ñ ’¥’´’°’æ’∏÷Ä’∂’•÷Ä’®
            user.balance -= price
            user.step = 'waiting_admin_contact' # ’°÷Ä’£’•’¨’°÷É’°’Ø’∏÷Ç’¥ ’•’∂÷Ñ ’°’∂’∏÷Ç’∂’® ÷É’∏’≠’•’¨’®
            user.save!

            # ’Ä’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª’®
            user_message = <<~HTML
            ’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂ ’¢’∏’∂’∏÷Ç’Ω ’®’∂’ø÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä’ù #{format_discount(discount)}! üéâ

            ’Å’•÷Ä ’¢’°’¨’°’∂’Ω’´÷Å ’∞’°’∂’æ’•’¨ ’ß #{price} LOM÷â

            ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’Ω’∫’°’Ω’•’¨, ’¥’´’∂’π ’°’§’¥’´’∂’´’Ω’ø÷Ä’°’ø’∏÷Ä’® ’Ø’°’∫ ’Ø’∞’°’Ω’ø’°’ø’´ ’±’•’¶ ’∞’•’ø÷â
            ’Ñ’´’∂’π ’°’µ’§ ’¥’´ ÷É’∏’≠’•÷Ñ ’±’•÷Ä ÷Ö’£’ø’°’∂’∏÷Ç’∂’®÷â
            HTML

            bot.api.send_message(
            chat_id: user.telegram_id,
            text: user_message,
            parse_mode: 'HTML'
            )

          # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤

          referrals_count = user.children.count

          purchases_info = PromoUsage.joins(:promo_code)
                            .where(user_id: user.id)
                            .group('promo_codes.shop_id')
                            .count

          shops_info = purchases_info.map do |shop_id, count|
            shop = Shop.find_by(id: shop_id)
            "#{shop&.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω'}: #{count} –ø–æ–∫—É–ø–æ–∫"
          end.join("\n")

          username_display = user.username ? "@#{user.username}" : nil
          full_name_display = "#{user.first_name} #{user.last_name}".strip
          display_name = username_display || full_name_display

          admin_message = <<~TEXT
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –±–æ–Ω—É—Å #{format_discount(discount)} (#{price} –æ—á–∫–æ–≤):

            –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: #{display_name}
            Telegram ID: #{user.telegram_id}
            –†–æ–ª—å: #{user.role}
            –ë–∞–ª–∞–Ω—Å: #{user.balance}
            –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: #{referrals_count}
            –ü–æ–∫—É–ø–∫–∏:
            #{shops_info.presence || '–ü–æ–∫—É–ø–æ–∫ –Ω–µ—Ç'}

            –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: #{user.step}
          TEXT

          buttons = Telegram::Bot::Types::InlineKeyboardMarkup.new(
            inline_keyboard: [
              [
                Telegram::Bot::Types::InlineKeyboardButton.new(text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data: "referrals_#{user.id}")
              ]
            ]
          )

          SUPERADMINS.find_each do |admin|
            bot.api.send_message(
              chat_id: admin.telegram_id,
              text: admin_message,
              reply_markup: buttons
            )
          end
        when /^referrals_(\d+)$/
          user_id = $1.to_i
          target_user = User.find_by(id: user_id)
          chat_id = user.telegram_id

          if target_user
            referrals = target_user.children
            puts "–†–µ—Ñ–µ—Ä–∞–ª—ã: #{referrals.map(&:id).join(', ')}"

            if referrals.any?
              keyboard = referrals.map do |ref|
                [
                  Telegram::Bot::Types::InlineKeyboardButton.new(
                    text: safe_telegram_name_html(ref),
                    callback_data: "referral_profile:#{ref.id}"
                  )
                ]
              end

              bot.api.send_message(
                chat_id: chat_id,
                text: "–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{safe_telegram_name_html(target_user)}:",
                reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: keyboard),
                parse_mode: 'HTML'
              )
            else
              bot.api.send_message(chat_id: chat_id, text: "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")
            end
          else
            bot.api.send_message(chat_id: chat_id, text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
          end

        when /^referral_profile:(\d+)$/
          ref_user = User.find_by(id: $1)
          if ref_user && superadmin?(from.id)
            referrals_count = User.where(ancestry: ref_user.telegram_id.to_s).count

            shops_info = Shop.joins(:promo_codes => :promo_usages)
                            .where(promo_usages: { user_id: ref_user.id })
                            .distinct
                            .map { |s| "- #{s.name}" }.join("\n")

            profile = <<~TEXT
              –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: #{safe_telegram_name_html(ref_user)}
              Telegram ID: #{ref_user.telegram_id}
              –†–æ–ª—å: #{ref_user.role}
              –ë–∞–ª–∞–Ω—Å: #{ref_user.balance}
              –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: #{referrals_count}
              –ü–æ–∫—É–ø–∫–∏:
              #{shops_info.presence || '–ü–æ–∫—É–ø–æ–∫ –Ω–µ—Ç'}

              –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: #{ref_user.step}
            TEXT

            bot.api.send_message(chat_id: chat_id, text: profile, parse_mode: 'HTML')
          else
            bot.api.send_message(chat_id: chat_id, text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
          end

        when /^promos_(day|week)_(\d+)$/
          period, shop_id = $1, $2.to_i
          shop = Shop.find_by(id: shop_id)

          if shop
            time_range = case period
                        when 'day'
                          1.day.ago..Time.current
                        when 'week'
                          1.week.ago..Time.current
                        end

            promos = PromoCode.where(shop_id: shop.id, created_at: time_range)

            product_names = {
              1 => "0,5’£",
              2 => "1’£",
              3 => "1‚Ä§5’£",
              4 => "2’£",
              5 => "2‚Ä§5’£",
              6 => "3’£",
              7 => "3‚Ä§5’£",
              8 => "4’£",
              9 => "4‚Ä§5’£",
              10 => "5’£"
            }

            if promos.any?
              text = "üõç –ü—Ä–æ–º–æ–∫–æ–¥—ã –∑–∞ #{period == 'day' ? '–¥–µ–Ω—å' : '–Ω–µ–¥–µ–ª—é'}:\n\n"
              promos.each do |promo|
                product_name = product_names[promo.product_type] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                text += "üî∏ #{promo.code} | #{product_name}\nüïí #{promo.created_at.in_time_zone('Asia/Yerevan').strftime('%d.%m %H:%M')}\n\n"
              end
            else
              text = "‚ö†Ô∏è –ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            end

            bot.api.send_message(chat_id: user.telegram_id, text: text)
          else
            bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
          end
        
        when /^show_children:(\d+)$/
          user_id = $1.to_i
          parent_user = User.find_by(id: user_id)
          children = parent_user&.children

          if children&.any?
            text = "üë∂ *–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{parent_user.first_name}*:\n\n"
            text += children.map.with_index(1) do |child, i|
              "#{i}. #{child.first_name} #{child.last_name} (@#{child.username})"
            end.join("\n")
          else
            text = "‚ÑπÔ∏è –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
          end

          bot.api.send_message(chat_id: user.telegram_id, text: text, parse_mode: "Markdown")

        when /^show_parent:(\d+)$/
          user_id = $1.to_i
          child_user = User.find_by(id: user_id)
          parent = child_user&.parent

          if parent
            text = <<~TEXT
              üë®‚Äçüë¶ *–†–æ–¥–∏—Ç–µ–ª—å:*

              üôç‚Äç‚ôÇÔ∏è –ò–º—è: #{parent.first_name}
              üôç‚Äç‚ôÄÔ∏è –§–∞–º–∏–ª–∏—è: #{parent.last_name}
              üßë‚Äçüíª Username: @#{parent.username}
            TEXT
          else
            text = "‚ÑπÔ∏è –†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
          end

          bot.api.send_message(chat_id: user.telegram_id, text: text, parse_mode: "Markdown")

        when /^select_role:(\d+)$/
          target_id = $1.to_i
          roles = %w[admin user shop]

          role_buttons = roles.map do |role|
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: role.capitalize,
              callback_data: "set_role:#{target_id}:#{role}"
            )
          end

          keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
            inline_keyboard: role_buttons.each_slice(2).to_a
          )

          bot.api.send_message(
            chat_id: user.telegram_id,
            text: "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup: keyboard
          )

        when /^set_role:(\d+):(admin|user|shop)$/
          target_id = $1.to_i
          new_role = $2

          target_user = User.find_by(id: target_id)

          if target_user
            target_user.update(role: new_role)
            bot.api.send_message(
              chat_id: user.telegram_id,
              text: "‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: *#{new_role}*",
              parse_mode: 'Markdown'
            )
          else
            bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
          end

        when 'enter_promo'
          user.update(step: 'waiting_for_promo_code')
            bot.api.send_message(chat_id: user.telegram_id, text: '’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’±’•÷Ä ’∫÷Ä’∏’¥’∏’Ø’∏’§’®:')
          bot.api.answer_callback_query(callback_query_id: update.id) # —É–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏ —É –∫–Ω–æ–ø–∫–∏

        when 'add_city'
          user.update(step: 'awaiting_new_city_name')
            bot.api.send_message(chat_id: user.telegram_id, text: "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’∂’∏÷Ä ÷Ñ’°’≤’°÷Ñ’´ ’°’∂’∏÷Ç’∂’®’ù ’®’∂’§’∞’°’∂’∏÷Ç÷Ä ÷Å’°’∂’Ø’´ ’∞’°’¥’°÷Ä÷â")

        when 'add_shop'
          user.update(step: 'awaiting_username_for_shop')
          bot.api.send_message(chat_id: user.telegram_id, text: "üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞: \\n –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å")
          
        when 'list_shops'
          shops = Shop.all

          if shops.any?
            shops.each do |shop|
              promo_count = PromoCode.where(shop_id: shop.id).count

              kb = [
                [
                  Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üóë –£–¥–∞–ª–∏—Ç—å', callback_data: "delete_shop_#{shop.id}")
                ],
                [
                  Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üìÖ –ó–∞ –¥–µ–Ω—å', callback_data: "promos_day_#{shop.id}"),
                  Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üóì –ó–∞ –Ω–µ–¥–µ–ª—é', callback_data: "promos_week_#{shop.id}")
                ]
              ]
              markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)

              bot.api.send_message(
                chat_id: user.telegram_id,
                text: "üë§ –í–ª–∞–¥–µ–ª–µ—Ü: @#{shop.link}\nüî¢ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤: #{promo_count}",
                reply_markup: markup
              )
            end
          else
            bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå –ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
          end
        
        when 'yerevan_map'
          yerevan_places = City.where(sub: true)

          if yerevan_places.any?
            place_buttons = yerevan_places.map do |place|
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: place.name,
                callback_data: "city_#{place.id}"
              )
            end.each_slice(2).to_a

            back_button = Telegram::Bot::Types::InlineKeyboardButton.new(
              text: "üîô ’é’•÷Ä’°’§’°’º’∂’°’¨",
              callback_data: "map"
            )

            keyboard = place_buttons + [[back_button]]

            bot.api.edit_message_text(
              chat_id: CHAT_ID,
              message_id: update.message.message_id,
              text: "üìç ‘∏’∂’ø÷Ä’´÷Ä ‘µ÷Ä÷á’°’∂’´ ’ø’°÷Ä’°’Æ÷Ñ’®:",
              reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: keyboard)
            )
          else
            bot.api.edit_message_text(
              chat_id: CHAT_ID,
              message_id: update.message.message_id,
              text: "‚ùå ‘µ÷Ä÷á’°’∂’∏÷Ç’¥ ’ø’°÷Ä’°’Æ÷Ñ’∂’•÷Ä ’π’Ø’°’∂÷â"
            )
          end
        
        when 'map'
          general_cities = City.where(sub: [false, nil])
          yerevan_button = Telegram::Bot::Types::InlineKeyboardButton.new(
            text: "üèô ‘µ÷Ä÷á’°’∂",
            callback_data: "yerevan_map"
          )

          city_buttons = general_cities.map do |city|
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: city.name,
              callback_data: "city_#{city.id}"
            )
          end

          # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –≤ —Ä—è–¥
          keyboard = [[yerevan_button]] + city_buttons.each_slice(2).to_a

          markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: keyboard)

          bot.api.edit_message_text(
            chat_id: CHAT_ID,
            message_id: update.message.message_id,
            text: "üèô ‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’°’≤’°÷Ñ’® üëá",
            reply_markup: markup
          )

        when 'show_yerevan_subs'
          shop = user.shop
          next unless shop

          yerevan_places = City.where(sub: true)
          attached_ids = shop.city_ids

          buttons = yerevan_places.map do |city|
            attached = attached_ids.include?(city.id)
            emoji = attached ? '‚úÖ' : '‚ûï'
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: "#{emoji} #{city.name}",
              callback_data: "toggle_city_#{shop.id}_#{city.id}"
            )
          end.each_slice(2).to_a

          # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –≤ –ï—Ä–µ–≤–∞–Ω–µ"
          add_yerevan_place_button = Telegram::Bot::Types::InlineKeyboardButton.new(
            text: "‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’æ’°’µ÷Ä ‘µ÷Ä÷á’°’∂’∏÷Ç’¥",
            callback_data: "add_yerevan_place"
          )

          # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
          back_button = Telegram::Bot::Types::InlineKeyboardButton.new(
            text: "üîô ’é’•÷Ä’°’§’°’º’∂’°’¨",
            callback_data: "edit_cities_#{shop.id}"
          )

          keyboard = [[add_yerevan_place_button]] + buttons + [[back_button]]

          bot.api.edit_message_text(
            chat_id: user.telegram_id,
            message_id: update.message.message_id,
            text: "üìç ‘∏’∂’ø÷Ä’´÷Ä ‘µ÷Ä÷á’°’∂’´ ’ø’°÷Ä’°’Æ÷Ñ’∂’•÷Ä’®:",
            reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(
              inline_keyboard: keyboard
            )
          )

        when 'add_yerevan_place'
          user.update(step: 'awaiting_yerevan_name')

          bot.api.send_message(
            chat_id: user.telegram_id,
            text: "‚úçÔ∏è ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ‘µ÷Ä÷á’°’∂’´ ’ø’°÷Ä’°’Æ÷Ñ’´ ’°’∂’∏÷Ç’∂’®, ’∏÷Ä ’∏÷Ç’¶’∏÷Ç’¥ ’•’Ω ’°’æ’•’¨’°÷Å’∂’•’¨÷â"
          )

        when 'bonus'
          user.update(step: 'bonus')

          buttons = Telegram::Bot::Types::InlineKeyboardMarkup.new(
            inline_keyboard: [
              [
                Telegram::Bot::Types::InlineKeyboardButton.new(text: '20% ’¶’•’≤’π', callback_data: 'bonus_20'),
                Telegram::Bot::Types::InlineKeyboardButton.new(text: '50% ’¶’•’≤’π', callback_data: 'bonus_50'),
                Telegram::Bot::Types::InlineKeyboardButton.new(text: '0,5',  callback_data: 'bonus_5'),
                Telegram::Bot::Types::InlineKeyboardButton.new(text: '1', callback_data: 'bonus_1')
              ]
            ]
          )

            bot.api.send_message(
            chat_id: update.from.id,
            text: "‘∏’∂’ø÷Ä’•÷Ñ ’¢’∏’∂’∏÷Ç’Ω’´ ’ø’•’Ω’°’Ø’®’ù\n\nüü¢ 50% ’¶’•’≤’π ‚Äî 35.000 LOM\nüü° 20% ’¶’•’≤’π ‚Äî 15.000 LOM\nüåø 0.5 ‚Äî 50.000 LOM\nüåø 1 ‚Äî 100.000 LOM",
            reply_markup: buttons
            )
        when 'activate_boost'
          if user.boost_today?
            bot.api.answer_callback_query(
              callback_query_id: update.id,
              text: "‚ùóÔ∏è–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±—É—Å—Ç —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."
            )
          else
            user.boosts.create!(activated_at: Time.current)
            bot.api.answer_callback_query(
              callback_query_id: update.id,
              text: "üöÄ –ë—É—Å—Ç x2 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 2 —á–∞—Å–∞!"
            )

            bot.api.send_message(
              chat_id: user.telegram_id,
              text: "–í–∞—à –±—É—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω! –í —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è x2!"
            )
          end
        
        when 'check_subscription'
          user_id = user.telegram_id
          begin
            chat_member = bot.api.get_chat_member(chat_id: CHANNEL, user_id: user_id)
            status = chat_member.status rescue nil

            if %w[member administrator creator].include?(status)
              bot.api.approve_chat_join_request(chat_id: CHAT_ID, user_id: user_id)
              user.update(step: 'approved')

              # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
              if update.message
                bot.api.edit_message_reply_markup(
                  chat_id: update.message.chat.id,
                  message_id: update.message.message_id,
                  reply_markup: nil
                )
              end

              bot.api.send_message(chat_id: user_id, text: "‚úÖ ‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø ’π’°’ø!")

              # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è
              name = user&.username.present? ? "@#{user.username}" : "#{[user&.first_name, user&.last_name].compact.join(' ')}"
              bot.api.send_message(chat_id: CHAT_ID, text: "‚úÖ ‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø ’π’°’ø! #{name}")

              # === –ù–ê–ß–ò–°–õ–ï–ù–ò–ï –û–ß–ö–û–í ===
              if user.pending_referrer_id.present? && user.ancestry.blank?
                referrer = User.find_by(id: user.pending_referrer_id)

                if referrer && referrer.id != user.id && !user.ban? && user.step == 'approved' && user&.parent_access == true
                  user.update(ancestry: referrer.id, pending_referrer_id: nil, parent_access: false)
                  referrer.increment!(:balance, 800)
                  referrer.increment!(:score, 800)

                  bot.api.send_message(chat_id: referrer.telegram_id, text: "üéâ ’Ü’∏÷Ä ÷Ö’£’ø’°’ø’•÷Ä ’¥’´’°÷Å’°’æ ’±’•÷Ä ’∞’≤’∏÷Ç’¥’∏’æ÷â ‘¥’∏÷Ç÷Ñ ’Ω’ø’°÷Å’•’¨ ’•÷Ñ 800 LOM÷â")
                end
              end
              # =========================

            else
              bot.api.answer_callback_query(
                callback_query_id: update.id,
                text: "‚ùóÔ∏è‘¥’∏÷Ç÷Ñ ’§’•’º ’¢’°’™’°’∂’∏÷Ä’§’°’£÷Ä’æ’°’Æ ’π’•÷Ñ÷â",
                show_alert: true
              )
            end
          rescue => e
            puts "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: #{e.message}"
            bot.api.answer_callback_query(
              callback_query_id: update.id,
              text: "‚ùå ’ç’≠’°’¨ ’°’º’°’ª’°÷Å’°’æ÷â",
              show_alert: true
            )
          end
        when 'confirm_reset_scores'
          if user.role == 'superadmin'
            kb = [
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: '‚úÖ –î–∞, –æ–±–Ω—É–ª–∏—Ç—å', callback_data: 'reset_scores')],
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_reset')]
            ]

            markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
            bot.api.send_message(chat_id: user.telegram_id, text: "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?", reply_markup: markup)
          end
        when 'cancel_reset'
          if user.role == 'superadmin'
            bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå –û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
          end
        when 'reset_scores'
          if user.role == 'superadmin'
            User.update_all(score: 0)
            bot.api.send_message(chat_id: user.telegram_id, text: "‚úÖ –û—á–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω—É–ª–µ–Ω—ã.")
          else
            bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
          end
        end
      
      when Telegram::Bot::Types::ChatJoinRequest
        user_id = update.from.id
        chat_id = update.chat.id

        next if user.nil?

        if user.ban
          bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå ‘¥’∏÷Ç÷Ñ ’∂’°’≠’Ø’´’∂’∏÷Ç’¥ ’¨÷Ñ’•’¨ ’•÷Ñ ’π’°’ø’® ÷á ’π’•÷Ñ ’Ø’°÷Ä’∏’≤ ’Ø÷Ä’Ø’´’∂ ’¥’´’°’∂’°’¨÷â")
        else
          markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(
            inline_keyboard: [
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üí¨ ’ä’°÷Ä’ø’°’§’´÷Ä ’∞’•’ø÷á’•’¨ ’ø’æ’µ’°’¨ ’°’¨’´÷Ñ’´’∂', url: 'https://t.me/PlanHubTM')],
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: '‚úÖ ’á’°÷Ä’∏÷Ç’∂’°’Ø’•’¨', callback_data: 'check_subscription')]
            ]
          )

          rules_text = "‘≤’°÷Ä÷á ÷á ’¢’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø PlanHub! \nüéâ ’Ñ’•’∂÷Ñ ’∏÷Ç÷Ä’°’≠ ’•’∂÷Ñ ’±’•’¶ ’ø’•’Ω’∂’•’¨ ’¥’•÷Ä ’∞’°÷Ä’©’°’Ø’∏÷Ç’¥÷â\nüëâ ‘±’∂’§’°’¥’°’Ø÷Å’•’¨’∏’æ ’¥’•÷Ä ’∞’°’¥’°’µ’∂÷Ñ’´’∂, ’§’∏÷Ç÷Ñ ’®’∂’§’∏÷Ç’∂’∏÷Ç’¥ ’•÷Ñ ’¥’•÷Ä ’Ø’°’∂’∏’∂’∂’•÷Ä’®÷â\n‚ùóÔ∏è ’ä’°÷Ä’ø’°’§’´÷Ä ’ß ’∞’•’ø÷á’•’¨ ’¥’•÷Ä [‘ø’°’∂’°’¨’´’∂]( @PlanHubTM ), ’∏÷Ä’∫’•’Ω’¶’´ ’Ø’°÷Ä’∏’≤’°’∂’°÷Ñ ’∑’°÷Ä’∏÷Ç’∂’°’Ø’•’¨:\n\n’Ä’´’∑’•÷Å’∏÷Ç’¥\nüìÑ ’Ä’°÷Ä’©’°’Ø’∏÷Ç’¥ ’Ø’°÷Ä’∏’≤ ’•’∂ ’∞’°’µ’ø’∂’æ’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä, ’∏÷Ä’∏’∂÷Ñ ’∂’°’≠’°’ø’•’Ω’æ’°’Æ ’•’∂ 18+ ’ø’°÷Ä’´÷Ñ’´ ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä’´ ’∞’°’¥’°÷Ä÷â\nüîê ‘±’∂’∞÷Ä’°’™’•’∑’ø ’ß ’¨’´’∂’•’¨ ’¶’£’∏’∂ ’∏÷Ç ’∫’°’ø’°’Ω’≠’°’∂’°’ø’∏÷Ç’ù ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨’∏’æ ’∞’°’¥’°÷Å’°’∂÷Å’´ ’¢’∏’¨’∏÷Ä ’º’•’Ω’∏÷Ç÷Ä’Ω’∂’•÷Ä’®÷â\n\n‚ú® ‘ø’°’º’∏÷Ç÷Å’•’¨ ’•’∂÷Ñ ’∞’°÷Ä’¥’°÷Ä’°’æ’•’ø ’¥’´’ª’°’æ’°’µ÷Ä’ù ’¢’∏’¨’∏÷Ä’´ ’∞’°’¥’°÷Ä:\n’ç’•’≤’¥’•÷Ñ \"’á’°÷Ä’∏÷Ç’∂’°’Ø’•’¨\"’ù ’°’∂’§’°’¥’°’Ø÷Å’∏÷Ç’©’µ’∏÷Ç’∂’® ’∞’°’Ω’ø’°’ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â"

          user.update(step: 'pending')
          bot.api.send_message(chat_id: user.telegram_id, text: "–í–Ω–∏–º–∞–Ω–∏–µ 18+\n–£ –Ω–∞—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–æ–≥–æ –¥–ª—è 18+\n–í—Å—ë —ç—Ç–æ –≤–∑—è—Ç–æ –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –ø—Ä–æ—Å—Ç–æ—Ä–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
          bot.api.send_message(chat_id: user.telegram_id, text: rules_text, reply_markup: markup)
        end
      else
        puts "‚ùî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update: #{update.class}"
      end
  
    rescue StandardError => e
      puts "üî• –û—à–∏–±–∫–∞: #{e.message}"
    end
  end
end

at_exit do
  FileUtils.rm_f(LOCK_FILE)
end