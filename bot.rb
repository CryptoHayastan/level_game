require 'telegram/bot'
require_relative 'config/environment'
require 'rufus-scheduler'

TOKEN = ENV['TELEGRAM_BOT_TOKEN']
CHANNEL = '@KukuruznikTM'
CHAT_ID = -1002291429008

def find_or_update_user(update)
  return unless update.respond_to?(:from) && update.from

  user_id = update.from.id
  username = update.from.username || ''
  first_name = update.from.first_name || ''
  last_name = update.from.last_name || ''

  chat_id =
    if update.respond_to?(:chat) && update.chat&.title && update.chat&.id
      update.chat.id
    elsif update.respond_to?(:message) && update.message&.chat&.id
      update.message.chat.id
    end

  user = User.find_or_initialize_by(telegram_id: user_id)
  user.username = username
  user.first_name = first_name
  user.last_name = last_name
  user.role ||= 'user'
  user.step ||= 'start'
  user.ban ||= false
  user.parent_access ||= true # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∞–º –ø–æ —Å–µ–±–µ
  user.referral_link ||= "https://t.me/Kukuruznik_profile_bot?start=#{user.telegram_id}"
  user.balance ||= 0
  user.save!

  user
end

def admin_user?(bot, chat_id, user_id)
  begin
    admins = bot.api.getChatAdministrators(chat_id: chat_id)

    is_admin = admins.any? { |admin| admin.user.id.to_i == user_id.to_i }

    if is_admin
      user = User.find_by(telegram_id: user_id)
      if user && user.role != 'admin'
        if user.role != 'superadmin'
          user.update(role: 'admin')
        end
      end
    end

    is_admin
  rescue => e
    puts "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∞: #{e.message}"
    false
  end
end

def safe_telegram_name(u)
  if u.first_name.present? || u.last_name.present?
    [
      u.first_name&.gsub('_', '\\_'),
      u.last_name&.gsub('_', '\\_')
    ].compact.join(' ')
  elsif u.username.present?
    "@#{u.username.gsub('_', '\\_')}"
  else
    "–ë–µ–∑ –∏–º–µ–Ω–∏"
  end
end

def collect_daily_bonus(user, bot, telegram_id)
  if user.telegram_id == telegram_id
    daily_bonus = user.daily_bonus || user.create_daily_bonus(bonus_day: 0)

    now = Time.current

    if daily_bonus.last_collected_at&.to_date == now.to_date
      bot.api.send_message(chat_id: CHAT_ID, text: "üìÖ –í—ã —É–∂–µ —Å–æ–±—Ä–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!")
      return
    end

    if daily_bonus.last_collected_at && daily_bonus.last_collected_at.to_date < now.to_date - 1
      daily_bonus.bonus_day = 0 # —Å–±—Ä–æ—Å –µ—Å–ª–∏ –¥–µ–Ω—å –ø—Ä–æ–ø—É—â–µ–Ω
    end

    daily_bonus.bonus_day += 1
    daily_bonus.last_collected_at = now

    reward = daily_bonus.bonus_day * 10
    user.balance += reward

    daily_bonus.save!
    user.save!

    if daily_bonus.bonus_day > 10
      daily_bonus.bonus_day = 1
    else
      bot.api.send_message(chat_id: CHAT_ID, text: "‚úÖ –î–µ–Ω—å #{daily_bonus.bonus_day} ‚Äî –≤—ã –ø–æ–ª—É—á–∏–ª–∏ #{reward} –æ—á–∫–æ–≤!")
    end
  end
end

def steps(user, update, bot)
  message = update
  case user.step
  when 'awaiting_username_for_shop'
    username = message.text.delete_prefix('@').strip
    target_user = User.find_by(username: username)

    if target_user
      # –°–æ–∑–¥–∞—ë–º –º–∞–≥–∞–∑–∏–Ω —Å—Ä–∞–∑—É –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
      shop = Shop.create!(
        name: safe_telegram_name(target_user),
        link: target_user.username,
        user_id: target_user.id,
        online: false
      )
      target_user.update!(role: 'shop')

      bot.api.send_message(
        chat_id: user.telegram_id,
        text: "‚úÖ –ú–∞–≥–∞–∑–∏–Ω ¬´#{shop.name}¬ª —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ @#{target_user.username}"
      )
    else
      bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username @#{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    end

    user.update(step: nil)
   when 'awaiting_new_city_name'
    city_name = message.text.strip
    if city_name.empty?
      bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
      return
    end

    city = City.find_or_create_by(name: city_name)
    user.update(step: nil)

    bot.api.send_message(chat_id: user.telegram_id, text: "‚úÖ –ì–æ—Ä–æ–¥ *#{city.name}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫.", parse_mode: 'Markdown')
  when 'waiting_for_promo_code'
    promo_code_text = message.text.strip
    promo = PromoCode.find_by(code: promo_code_text)

    if promo.nil?
      bot.api.send_message(chat_id: user.telegram_id, text: "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    elsif promo.expired?
      bot.api.send_message(chat_id: user.telegram_id, text: "–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç—ë–∫.")
    elsif PromoUsage.exists?(user_id: user.id, promo_code_id: promo.id)
      bot.api.send_message(chat_id: user.telegram_id, text: "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
    else
      balance_to_add = promo.product_type == 1 ? 5000 : 12000
      user.balance ||= 0
      user.balance += balance_to_add
      user.step = nil
      user.save!

      PromoUsage.create!(user_id: user.id, promo_code_id: promo.id)

      bot.api.send_message(chat_id: user.telegram_id, text: "–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ #{balance_to_add} –æ—á–∫–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: #{user.balance}.")
    end
  end
end

def create_promo_code(bot, user, shop_id, product_type_str)
  puts "DEBUG: create_promo_code called with bot=#{bot}, user=#{user}, shop_id=#{shop_id}, product_type=#{product_type_str}"

  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–¥–∞—ë–º –∞—Ä–≥—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8)
  promo_code = "#{shop_id}:#{product_type_str}:#{SecureRandom.hex(8)}"
  begin
    # –¢–≤–æ–π –∫–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    expires_at = 2.hours.from_now
    promo = PromoCode.create!(
      code: promo_code,
      shop_id: shop_id,
      product_type: :product1,
      expires_at: expires_at
    )
  rescue => e
    puts "üî• –û—à–∏–±–∫–∞: #{e.message}"
    puts e.backtrace.join("\n")
  end

  if promo.persisted?
    product_name = product_type_str == 1 ? "–ü—Ä–æ–¥—É–∫—Ç 1 (5000 –æ—á–∫–æ–≤)" : "–ü—Ä–æ–¥—É–∫—Ç 2 (12000 –æ—á–∫–æ–≤)"

    bot.api.send_message(
      chat_id: user.telegram_id,
      text: "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω:\n\nüî§ –ö–æ–¥: `#{promo_code}`\n‚è≥ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 2 —á–∞—Å–∞.\nüéØ –¢–∏–ø: #{product_name}",
      parse_mode: 'Markdown'
    )
  else
    bot.api.send_message(
      chat_id: user.telegram_id,
      text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞."
    )
  end
end

Telegram::Bot::Client.run(TOKEN) do |bot|
  puts "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω..."

  scheduler = Rufus::Scheduler.new

  scheduler.every '60m' do
    Shop.where(online: true).find_each do |shop|
      if shop.online_since && shop.online_since < 60.minutes.ago
        shop.update(online: false)

        # –£–≤–µ–¥–æ–º–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if shop.user&.telegram_id
          bot.api.send_message(
            chat_id: shop.user.telegram_id,
            text: "üî¥ –í–∞—à –º–∞–≥–∞–∑–∏–Ω ¬´#{shop.name}¬ª –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á—ë–Ω —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç."
          )
        end
      end
    end
  end


  bot.listen do |update|
    begin
      user = find_or_update_user(update)

      if user&.role == 'superadmin' || user&.role == 'shop'
        steps(user, update, bot)
      end
  
      case update
      when Telegram::Bot::Types::Message
        text = update.text
  
        case text
        when '/start'
          user.update(step: nil)
          kb = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: [
            [Telegram::Bot::Types::InlineKeyboardButton.new(text: '–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: 'enter_promo')]
          ])
          bot.api.send_message(chat_id: user.telegram_id, text: '–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥.', reply_markup: kb)

        when /^\/start (\d+)$/
          referrer_telegram_id = $1.to_i
          puts "–†–µ—Ñ–µ—Ä–∞–ª ID: #{referrer_telegram_id}"

          referrer = User.find_by(telegram_id: referrer_telegram_id)

          if referrer.nil?
            bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå –†–µ—Ñ–µ—Ä–∞–ª —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
          elsif referrer.id == user.id
            bot.api.send_message(chat_id: user.telegram_id, text: "‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è!")
          elsif user.ancestry.present?
            bot.api.send_message(chat_id: user.telegram_id, text: "‚ö†Ô∏è –í—ã —É–∂–µ –±—ã–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
          else
            user.ancestry = referrer.id
            if user.save
              referrer.increment!(:balance, 1000)
              bot.api.send_message(chat_id: user.telegram_id, text: "üéâ –†–µ—Ñ–µ—Ä–∞–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—Å—á–∏—Ç–∞–Ω!.")
            else
              # –¢—É—Ç —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "User cannot be a descendant of itself"
              error_msg = user.errors.full_messages.join(", ")
              puts "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: #{error_msg}"
              bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞: #{error_msg}")
            end
          end

        when '/profile'
          bonus_day = user.daily_bonus&.bonus_day.to_i
          bonus_day = 0 if bonus_day > 10
          days_left = 10 - bonus_day
  
          link = user.referral_link
          progress = ("üü©" * bonus_day) + ("‚¨ú" * (10 - bonus_day))
  
          referrals_count = user.children.count
          purchases_count = user.promo_usages.count

          user_info = <<~HTML
            –ò–º—è: #{safe_telegram_name(update.from)}
            –ë–∞–ª–∞–Ω—Å: #{user.balance} LOM
            üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π <code>https://t.me/Kukuruznik_profile_bot?start=#{user.telegram_id}</code>
            üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: #{referrals_count}
            üõí –ü–æ–∫—É–ø–æ–∫: #{purchases_count}

            üìÖ –ë–æ–Ω—É—Å: –î–µ–Ω—å #{bonus_day} –∏–∑ 10
            #{progress}
          HTML
  
          buttons = [
            [Telegram::Bot::Types::InlineKeyboardButton.new(text: "–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data: "daily_bonus_#{user.telegram_id}")]
          ]
  
          bot.api.send_message(
            chat_id: CHAT_ID,
            text: user_info,
            parse_mode: "HTML",
            reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)
          )

        when '/my_shop'
          if user.role == 'shop'
            shop = Shop.find_by(user_id: user.id)

            if shop
              shop_info = <<~TEXT
                –ú–∞–≥–∞–∑–∏–Ω: #{shop.name}
                Link: #{shop.link}
                –°—Ç–∞—Ç—É—Å: #{shop.online ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ—Ñ–ª–∞–π–Ω'}
                –ì–æ—Ä–æ–¥–∞: #{shop.cities.map(&:name).join(', ')}
              TEXT

              toggle_button = Telegram::Bot::Types::InlineKeyboardButton.new(
                text: shop.online ? 'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –æ–Ω–ª–∞–π–Ω' : 'üü¢ –í–∫–ª—é—á–∏—Ç—å –æ–Ω–ª–∞–π–Ω',
                callback_data: "toggle_online_#{shop.id}"
              )

              bot.api.send_message(
                chat_id: user.telegram_id,
                text: shop_info,
                reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(
                  inline_keyboard: [
                    [toggle_button],
                    [Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üìç –£–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ—Ä–æ–¥–∞–º–∏', callback_data: "edit_cities_#{shop.id}")],
                    [Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üéü –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: "create_promo_#{shop.id}")]
                  ]
                )
              )
            end
          end

        when '/kap'
          cities = City.all

          city_buttons = cities.map do |city|

            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: city.name,
              callback_data: "city_#{city.id}"
            )
          end
          city_buttons = city_buttons.each_slice(2).to_a
          city_buttons << [Telegram::Bot::Types::InlineKeyboardButton.new(text: "–ù–∞–∑–∞–¥", callback_data: "back_to_main_menu")]
          
          bot.api.send_message(
            chat_id: CHAT_ID,
            text: "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: city_buttons)
          )

        when '/admin'
          if user.role == 'superadmin'
            kb = [
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üìã –í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', callback_data: 'list_shops')],
              [Telegram::Bot::Types::InlineKeyboardButton.new(text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', callback_data: 'add_shop')]
            ]

            markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
            bot.api.send_message(chat_id: user.telegram_id, text: "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup: markup)
          end

        when '/cancel'
          user.update(step: nil)
          bot.api.send_message(chat_id: user.telegram_id, text: "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

        end
  
      when Telegram::Bot::Types::CallbackQuery
        data = update.data
  
        case data
        when /^daily_bonus_/
          telegram_id = data.split('_').last.to_i
          collect_daily_bonus(user, bot, telegram_id)

        when /^city_/
          city_id = data.split('_').last.to_i
          city = City.find_by(id: city_id)

        when /^delete_shop_(\d+)$/
          shop_id = $1.to_i
          shop = Shop.find_by(id: shop_id)

          if shop
            User.find(shop.user_id).update(role: 'user')
            shop.destroy
            bot.api.send_message(chat_id: update.from.id, text: "üóë –ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
          else
            bot.api.send_message(chat_id: update.from.id, text: "‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
          end

        when /^toggle_online_(\d+)$/
          shop = Shop.find_by(id: $1.to_i)

          if shop && shop.user_id == user.id
            if shop.online
              shop.update(online: false)
              bot.api.send_message(chat_id: user.telegram_id, text: "üî¥ –ú–∞–≥–∞–∑–∏–Ω –æ—Ç–∫–ª—é—á—ë–Ω.")
            else
              shop.update(online: true, online_since: Time.current)  # online_since ‚Äî –Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
              bot.api.send_message(chat_id: user.telegram_id, text: "üü¢ –ú–∞–≥–∞–∑–∏–Ω –≤–∫–ª—é—á—ë–Ω. –ê–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç.")
            end
          else
            bot.api.send_message(chat_id: user.telegram_id, text: "‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
          end

        when /^edit_cities_(\d+)$/
          shop = Shop.find_by(id: $1)

          if shop && shop.user_id == user.id
            all_cities = City.all
            attached_ids = shop.city_ids

            buttons = all_cities.map do |city|
              attached = attached_ids.include?(city.id)
              emoji = attached ? '‚úÖ' : '‚ûï'
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "#{emoji} #{city.name}",
                callback_data: "toggle_city_#{shop.id}_#{city.id}"
              )
            end.each_slice(2).to_a

            # ‚ûï –ö–Ω–æ–ø–∫–∞ —Å–≤–µ—Ä—Ö—É
            add_general_city_button = Telegram::Bot::Types::InlineKeyboardButton.new(
              text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ (–æ–±—â–∏–π)",
              callback_data: "add_city"
            )

            bot.api.edit_message_text(
              chat_id: user.telegram_id,
              message_id: update.message.message_id,
              text: "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞:",
              reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(
                inline_keyboard: [[add_general_city_button]] + buttons
              )
            )
          end

        when /^toggle_city_(\d+)_(\d+)$/
          shop = Shop.find_by(id: $1)
          city = City.find_by(id: $2)

          if shop && city && shop.user_id == user.id
            if shop.cities.exists?(city.id)
              shop.cities.delete(city)
            else
              shop.cities << city
            end

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            all_cities = City.all
            attached_ids = shop.city_ids

            buttons = all_cities.map do |c|
              attached = attached_ids.include?(c.id)
              emoji = attached ? '‚úÖ' : '‚ûï'
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "#{emoji} #{c.name}",
                callback_data: "toggle_city_#{shop.id}_#{c.id}"
              )
            end.each_slice(2).to_a

            bot.api.edit_message_reply_markup(
              chat_id: user.telegram_id,
              message_id: update.message.message_id,
              reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(
                inline_keyboard: buttons
              )
            )
          end
        when /^create_promo_(\d+)$/
          shop = Shop.find_by(id: $1)
          if shop && shop.user_id == user.id
            bot.api.send_message(
              chat_id: user.telegram_id,
              text: "üõç –ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç?\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
              reply_markup: Telegram::Bot::Types::InlineKeyboardMarkup.new(
                inline_keyboard: [
                  [
                    Telegram::Bot::Types::InlineKeyboardButton.new(text: "üì¶ –ü—Ä–æ–¥—É–∫—Ç 1 (5000 –æ—á–∫–æ–≤)", callback_data: "product1_#{shop.id}"),
                    Telegram::Bot::Types::InlineKeyboardButton.new(text: "üéÅ –ü—Ä–æ–¥—É–∫—Ç 2 (12000 –æ—á–∫–æ–≤)", callback_data: "product2_#{shop.id}")
                  ]
                ]
              )
            )
          end

        when /^product1_\d+$/
          shop_id = data.split('_').last.to_i
          create_promo_code(bot, user, shop_id, 1)

        when /^product2_\d+$/
          shop_id = data.split('_').last.to_i
          create_promo_code(bot, user, shop_id, 2)
        when 'enter_promo'
          user.update(step: 'waiting_for_promo_code')
          bot.api.send_message(chat_id: user.telegram_id, text: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:')
          bot.api.answer_callback_query(callback_query_id: update.id) # —É–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏ —É –∫–Ω–æ–ø–∫–∏

        when 'add_city'
          user.update(step: 'awaiting_new_city_name')
          bot.api.send_message(chat_id: user.telegram_id, text: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞:")

        when 'add_shop'
          user.update(step: 'awaiting_username_for_shop')
          bot.api.send_message(chat_id: user.telegram_id, text: "üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:\\n –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å")
          
        when 'list_shops'
          shops = Shop.all
          if shops.any?
            shops.each do |shop|
              shop_text = "üè™ –ú–∞–≥–∞–∑–∏–Ω: *#{shop.name}*\nüë§ –í–ª–∞–¥–µ–ª–µ—Ü: @#{User.find(shop.user_id)&.username || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}"

              kb = [
                [
                  Telegram::Bot::Types::InlineKeyboardButton.new(text: 'üóë –£–¥–∞–ª–∏—Ç—å', callback_data: "delete_shop_#{shop.id}")
                ]
              ]
              markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)

              bot.api.send_message(
                chat_id: update.from.id,
                text: shop_text,
                reply_markup: markup,
                parse_mode: 'Markdown'
              )
            end
          else
            bot.api.send_message(chat_id: update.from.id, text: "‚ùå –ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
          end

        end
      else
        puts "‚ùî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update: #{update.class}"
      end
  
    rescue StandardError => e
      puts "üî• –û—à–∏–±–∫–∞: #{e.message}"
    end
  end
end